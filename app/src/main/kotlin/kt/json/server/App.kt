/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package kt.json.server

import io.ktor.application.*
import io.ktor.features.*
import io.ktor.http.*
import io.ktor.jackson.*
import io.ktor.request.*
import io.ktor.routing.*
import io.ktor.server.engine.*
import io.ktor.server.netty.*
import io.ktor.serialization.*
import io.ktor.util.pipeline.*
import org.reflections.*
import org.reflections.scanners.*
import org.reflections.util.*
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import kotlinx.serialization.json.*

val logger: Logger = LoggerFactory.getLogger("main.class")

class App {
    val greeting: String
        get() {
            return "Hello World!"
        }
}

fun printRoutes() {
    val reflections =
        Reflections(
            ConfigurationBuilder()
                .addUrls(ClasspathHelper.forPackage("kt.json.server"))
                .setScanners(TypeAnnotationsScanner(), SubTypesScanner(false))
        )

    reflections.getSubTypesOf(IBase::class.java).forEach { it ->
        // print routes
        println("Routes http://localhost:8000/${it.name.split('.').last()}")
    }
}

fun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)
fun Application.main(testing: Boolean = false) {
    println(
        "Trace=${logger.isTraceEnabled}, Debug=${logger.isDebugEnabled}, Info=${logger.isInfoEnabled}, Warn=${logger.isWarnEnabled}, Error=${logger.isErrorEnabled}"
    )
    logger.info("------ INFO------")
    logger.debug("------ DEBUG ------")
    logger.error("------ ERROR ------")
    logger.trace("------ TRACE ------")
    printRoutes()
    install(CORS) {
        anyHost()
    }
    install(DefaultHeaders)
    install(CallLogging)
    install(ContentNegotiation) {
        //handle content-type: application/json
        json(Json {
            prettyPrint = true
            isLenient = true
        })
    }
    routing {
        endpoints()
        health()
    }
}

