/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package kt.json.server

import com.google.gson.GsonBuilder
import io.ktor.application.*
import io.ktor.http.*
import io.ktor.server.testing.*
import org.junit.FixMethodOrder
import org.junit.runners.MethodSorters
import kotlin.test.*

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
class AppTest {
    private var testComment: Comment? = null
    private var testPost: Post? = null

    @BeforeTest
    fun beforeTest() = withTestApplication(Application::main) {
        println("beforeTest")
        testComment = createComment(application)
        testPost = createPost(application)
    }

    private fun createComment(application: Application): Comment? {
        val className = "kt.json.server.Comment"
        val body = "{'body':'Testing body', 'author':'Bob'}"
        val json = application.populateTestStorage(className, body)
        val obj = Class.forName(className).getDeclaredConstructor().newInstance()
        val gson =
            GsonBuilder()
                .serializeNulls()
                .setDateFormat(DateFormat)
                .create()
        return gson.fromJson(json, obj::class.java) as Comment
    }

    private fun createPost(application: Application): Post? {
        val className = "kt.json.server.Post"
        val body = "{'title':'Testing body', 'author':'Bob'}"
        val json = application.populateTestStorage(className, body)
        val obj = Class.forName(className).getDeclaredConstructor().newInstance()
        val gson =
            GsonBuilder()
                .serializeNulls()
                .setDateFormat(DateFormat)
                .create()
        return gson.fromJson(json, obj::class.java) as Post
    }

    @Test
    fun testAppHasAGreeting() {
        val classUnderTest = App()
        assertNotNull(classUnderTest.greeting, "app should have a greeting")
    }

    @Test
    fun testPostRequests() = withTestApplication(Application::main) {
        with(handleRequest(HttpMethod.Post, "/comment") {
            // Add headers/body
            setBody("{'body':'Testing body', 'author':'Bob'}")
        }) {
            assertEquals(HttpStatusCode.OK, response.status())
            assertNotNull(response.content)
        }
        with(handleRequest(HttpMethod.Get, "/comment")) {
            assertEquals(HttpStatusCode.OK, response.status())
        }
    }

    @Test
    fun testGetRequests() = withTestApplication(Application::main) {
        with(handleRequest(HttpMethod.Get, "/post")) {
            assertEquals(HttpStatusCode.OK, response.status())
        }
        with(handleRequest(HttpMethod.Get, "/post?_sort=views&_order=asc")) {
            assertEquals(HttpStatusCode.OK, response.status())
        }
        with(handleRequest(HttpMethod.Get, "/comment")) {
            assertEquals(HttpStatusCode.OK, response.status())
        }
        with(handleRequest(HttpMethod.Get, "/comment/${testComment?.id}")) {
            assertEquals(HttpStatusCode.OK, response.status())
        }
        with(handleRequest(HttpMethod.Get, "/comment?_page=1&_size=10")) {
            assertEquals(HttpStatusCode.OK, response.status())
        }
        with(handleRequest(HttpMethod.Get, "/user")) {
            assertEquals(HttpStatusCode.OK, response.status())
        }
        with(handleRequest(HttpMethod.Get, "/health")) {
            assertEquals(HttpStatusCode.OK, response.status())
        }
    }

    @Test
    fun testDeleteRequests() = withTestApplication(Application::main) {
        with(handleRequest(HttpMethod.Post, "/comment") {
            // Add headers/body
            setBody("{'body':'Testing body', 'author':'Bob'}")
        }) {
            assertEquals(HttpStatusCode.OK, response.status())
            assertNotNull(response.content)
        }
        with(handleRequest(HttpMethod.Delete, "/post")) {
            assertEquals(HttpStatusCode.OK, response.status())
        }
        with(handleRequest(HttpMethod.Delete, "/comment/${testComment?.id}")) {
            assertEquals(HttpStatusCode.OK, response.status())
        }
    }

    @Test
    fun testPutRequests() = withTestApplication(Application::main) {
        with(handleRequest(HttpMethod.Put, "/comment/${testComment?.id}") {
            // Add headers/body
            setBody("{'body':'Testing body', 'author':'Bob'}")
        }) {
            assertEquals(HttpStatusCode.OK, response.status())
            assertNotNull(response.content)
        }
        with(handleRequest(HttpMethod.Get, "/comment")) {
            assertEquals(HttpStatusCode.OK, response.status())
        }
    }
}
