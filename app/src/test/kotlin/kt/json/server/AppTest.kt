/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package kt.json.server

import com.google.gson.GsonBuilder
import com.google.gson.reflect.TypeToken
import io.ktor.application.*
import io.ktor.http.*
import io.ktor.server.testing.*
import kt.json.server.helpers.*
import org.bson.Document
import org.junit.FixMethodOrder
import org.junit.runners.MethodSorters
import org.litote.kmongo.json
import java.lang.reflect.Type
import kotlin.test.BeforeTest
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertNotNull

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
class AppTest {
    private var testComment: Comment? = null
    private var testPost: Post? = null

    @BeforeTest
    fun beforeTest() = withTestApplication(Application::main) {
        println("beforeTest")
        testComment = createComment(application)
        testPost = createPost(application)
    }

    private fun createComment(application: Application): Comment? {
        val className = "kt.json.server.Comment"
        val body = "{'body':'Testing body', 'author':'Bob'}"
        val json = application.populateTestStorage(className, body)
        val obj = Class.forName(className).getDeclaredConstructor().newInstance()
        return GsonUtils.gson.fromJson(json, obj::class.java) as Comment
    }

    private fun createPost(application: Application): Post? {
        val className = "kt.json.server.Post"
        val body = "{'title':'Testing body', 'author':'Bob'}"
        val json = application.populateTestStorage(className, body)
        val obj = Class.forName(className).getDeclaredConstructor().newInstance()
        return GsonUtils.gson.fromJson(json, obj::class.java) as Post
    }

    @Test
    fun testAppHasAGreeting() {
        val classUnderTest = App()
        assertNotNull(classUnderTest.greeting, "app should have a greeting")
    }

    @Test
    fun testPostRequests() = withTestApplication(Application::main) {
        with(handleRequest(HttpMethod.Post, "/comment") {
            // Add headers/body
            setBody("{'body':'Testing body', 'author':'Bob'}")
        }) {
            assertEquals(HttpStatusCode.OK, response.status())
            assertNotNull(response.content)
        }
        with(handleRequest(HttpMethod.Get, "/comment")) {
            assertEquals(HttpStatusCode.OK, response.status())
        }
    }

    @Test
    fun testGetRequests() = withTestApplication(Application::main) {
        with(handleRequest(HttpMethod.Get, "/post")) {
            assertEquals(HttpStatusCode.OK, response.status())
        }
        with(handleRequest(HttpMethod.Get, "/post?_sort=views&_order=asc")) {
            assertEquals(HttpStatusCode.OK, response.status())
        }
        with(handleRequest(HttpMethod.Get, "/comment")) {
            assertEquals(HttpStatusCode.OK, response.status())
        }
        with(handleRequest(HttpMethod.Get, "/comment/${testComment?._id}")) {
            assertEquals(HttpStatusCode.OK, response.status())
        }
        with(handleRequest(HttpMethod.Get, "/comment?_page=1&_size=10")) {
            assertEquals(HttpStatusCode.OK, response.status())
        }
        with(handleRequest(HttpMethod.Get, "/user")) {
            assertEquals(HttpStatusCode.OK, response.status())
        }
        with(handleRequest(HttpMethod.Get, "/health")) {
            assertEquals(HttpStatusCode.OK, response.status())
        }
    }

    @Test
    fun testDeleteRequests() = withTestApplication(Application::main) {
        with(handleRequest(HttpMethod.Post, "/comment") {
            // Add headers/body
            setBody("{'body':'Testing body', 'author':'Bob'}")
        }) {
            assertEquals(HttpStatusCode.OK, response.status())
            assertNotNull(response.content)
        }
        with(handleRequest(HttpMethod.Delete, "/post")) {
            assertEquals(HttpStatusCode.OK, response.status())
        }
        with(handleRequest(HttpMethod.Delete, "/comment/${testComment?._id}")) {
            assertEquals(HttpStatusCode.OK, response.status())
        }
    }

    @Test
    fun testPutRequests() = withTestApplication(Application::main) {
        with(handleRequest(HttpMethod.Put, "/comment/${testComment?._id}") {
            // Add headers/body
            setBody("{'body':'Testing body updated', 'author':'Bob'}")
        }) {
            assertEquals(HttpStatusCode.OK, response.status())
            assertNotNull(response.content)
        }
        with(handleRequest(HttpMethod.Get, "/comment")) {
            assertEquals(HttpStatusCode.OK, response.status())
        }
    }

    @Test
    fun testLoginToken() {
        val loginToken = Helpers.longUUID()
        assertNotNull(loginToken)
    }

    @Test
    fun testGsonParseDate() {
        val gson = GsonBuilder().setDateFormat("MMM d, yyyy HH:mm:ss a").create();
        val dateJson = gson.toJson("Dec 22, 2014 12:00:00 PM");
        assertNotNull(dateJson)
    }

    @Test
    fun testDocumentParseDate() {
        val doc = Document.parse("{date: \"Dec 22, 2014, 12:00:00 PM\"}")
        assertNotNull(doc)
    }

    @Test
    fun testGsonParseObjectId() {
        var userJson = "{\"email\":\"desmond\",\"password\":\"password123!\",\"_id\":\"60c844dc50ef4113e0de7d83\"}"
        var rawJson = "{\"body\":\"Testing body\",\"author\":\"Bob\",\"_id\":{\"timestamp\":1641100920,\"counter\":6807555,\"randomValue1\":4120229,\"randomValue2\":27489}}"
        var userDoc: Document = Document.parse(userJson)
        userJson = GsonUtils.gson.toJson(userDoc)
        assertNotNull(userJson)
        val userType: Type = object : TypeToken<User?>() {}.getType()
        val obj = Class.forName("kt.json.server.User").getDeclaredConstructor().newInstance()
        var user2 = GsonUtils.gson.fromJson(userJson, obj::class.java) as User
        var user3 = Document.parse(rawJson)
        val userObj: User = GsonUtils.gson
            .fromJson(rawJson, userType) as User
        assertNotNull(userObj)
    }
}
